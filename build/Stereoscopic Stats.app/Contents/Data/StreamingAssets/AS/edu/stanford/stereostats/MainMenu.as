package edu.stanford.stereostats{	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.events.*;	import edu.stanford.stereostats.MainMenu3D;	import flash.utils.getQualifiedClassName;	import scaleform.clik.events.*;	public class MainMenu extends MovieClip {				public var currentListeners:Vector.<Listener>;		public var ButtonMenu:MovieClip;		public var ButtonLine:MovieClip;		public var ButtonPoint:MovieClip;		public var ButtonData:MovieClip;		public var ButtonScatter:MovieClip;		public var ButtonPlane:MovieClip;		public var ButtonPlanar:MovieClip;		public var ButtonOptions:MovieClip;		public var ButtonRotate:MovieClip;		public var ButtonMinimize:MovieClip;		public var ButtonQuit:MovieClip;				public var LineCreate:MovieClip;		public var LineBack:MovieClip;		public var LineX:MovieClip;		public var LineY:MovieClip;		public var LineZ:MovieClip;		public var stereoController:StereoController;				protected var _left:Boolean;		protected var other:MovieClip;		public function MainMenu() {			currentListeners = new Vector.<Listener>();		}		public function init(stereoController):void {			trace("init " + this.name);			if (this.name == "LeftMenu") {				_left = true;			} else {				_left = false;			}			this.stereoController = stereoController;			other = stereoController.getOther(_left);			addListenersToButtons();		}		public function removeListenersToButtons():void {			while (currentListeners.length > 0) {				var currentListener:Listener = currentListeners.pop();				currentListener.obj.removeEventListener(currentListener.type, currentListener.func);				trace("removed listener: ", currentListener.obj, currentListener.type);			}		}		public function addListenersToButtons():void {			var num:int = this.numChildren;			for (var a:int = 0; a < num; a++) {				var ish:DisplayObject = this.getChildAt(a);				var className = getQualifiedClassName(ish);				trace(className);				switch (className) {					case "CLIKButton":						var sisterButton:StateButton = StateButton(other.getChildByName(ish.name));						createListener(ish, MouseEvent.ROLL_OVER, sisterButton._handleMouseRollOver);						createListener(ish, MouseEvent.ROLL_OUT, sisterButton._handleMouseRollOut);						createListener(ish, MouseEvent.MOUSE_DOWN, sisterButton._handleMousePress);						createListener(ish, MouseEvent.CLICK, sisterButton._handleMouseRelease);						createListener(ish, MouseEvent.DOUBLE_CLICK, sisterButton._handleMouseRelease);						createListener(ish, InputEvent.INPUT, sisterButton._handleInput);						break;					case "MenuButton":						var sisterButton:StateButton = StateButton(other.getChildByName(ish.name));						createListener(ish, MouseEvent.ROLL_OVER, sisterButton._handleMouseRollOver);						createListener(ish, MouseEvent.ROLL_OUT, sisterButton._handleMouseRollOut);						createListener(ish, MouseEvent.MOUSE_DOWN, sisterButton._handleMousePress);						createListener(ish, MouseEvent.CLICK, sisterButton._handleMouseRelease);						createListener(ish, MouseEvent.DOUBLE_CLICK, sisterButton._handleMouseRelease);						createListener(ish, InputEvent.INPUT, sisterButton._handleInput);						break;					case "ButtonSmall":						var sisterButton:StateButton = StateButton(other.getChildByName(ish.name));						createListener(ish, MouseEvent.ROLL_OVER, sisterButton._handleMouseRollOver);						createListener(ish, MouseEvent.ROLL_OUT, sisterButton._handleMouseRollOut);						createListener(ish, MouseEvent.MOUSE_DOWN, sisterButton._handleMousePress);						createListener(ish, MouseEvent.CLICK, sisterButton._handleMouseRelease);						createListener(ish, MouseEvent.DOUBLE_CLICK, sisterButton._handleMouseRelease);						createListener(ish, InputEvent.INPUT, sisterButton._handleInput);						break;					case "DefaultTextInput":						var sisterInput:StateTextInput = StateTextInput(other.getChildByName(ish.name));						createListener(ish, MouseEvent.MOUSE_DOWN, sisterInput._handleMouseDown);						createListener(ish, MouseEvent.ROLL_OUT, sisterInput._handleRollOut);						createListener(ish, MouseEvent.ROLL_OVER, sisterInput._handleRollOver);						createListener(ish, InputEvent.INPUT, sisterInput._handleInput);						//createListener(ish, FocusEvent.FOCUS_IN, sisterInput._handleTextFieldFocusIn);						break;				}								switch (ish.name) {					case "ButtonMenu" :						createListener(ish, MouseEvent.CLICK, clickMenu);						break;					case "ButtonLine" :						createListener(ish, MouseEvent.CLICK, createLine);						break;				}			}		}		public function createListener(ish:DisplayObject, type:String, callback:Function):void {			ish.addEventListener(type, callback, false, 0, true);			currentListeners.push(new Listener(ish, type, callback));				trace("created listener: ", ish, type);		}		public function clickMenu(e:Event):void {			gotoScreen(2);		}		public function createLine(e:Event):void {			gotoScreen(3);		}		public function gotoScreen(newScreen:int):void {			stereoController.gotoScreen(newScreen);		}	}}